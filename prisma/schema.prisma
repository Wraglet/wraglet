// This is your Prisma schema file for Wraglet

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  suffix String?
  email String @unique
  password String
  dob DateTime?
  bio String?
  pronouns String
  profilePicture String?
  coverPhoto String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  publicProfileVisible Boolean @default(true)
  friendRequests String?

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
  posts Post[]
  comments Comment[]
  likes Like[]
  friends Friendship[]
}



model Conversation {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name String?
    isGroup Boolean?
    
    messagesIds String[] @db.ObjectId
    messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    body String?
    image String?
    createdAt DateTime @default(now())

    seenIds String[] @db.ObjectId
    seen User[] @relation("Seen", fields: [seenIds], references: [id])

    conversationId String @db.ObjectId
    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    senderId String @db.ObjectId
    sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

// Friendship is a self-referencing relation to model User representing friendships between users
model Friendship {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId @unique
  status String // You can define different statuses like 'pending', 'accepted', etc.
  following Boolean
  followed Boolean
  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
}


model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Associations
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  comments Comment[]
  likes Like[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Associations
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Associations
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

